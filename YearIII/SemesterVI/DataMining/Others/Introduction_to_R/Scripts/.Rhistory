(a_list <- list(
c(1, 1, 2, 5, 14, 42),
month.abb,
matrix(c(3, -8, 1, -3), nrow = 2),
asin
))
(main_list <- list(
middle_list = list(
element_in_middle_list = diag(3),
inner_list = list(
element_in_inner_list = pi ^ 1:4,
another_element_in_inner_list = "a"
)
),
element_in_main_list = log10(1:10)
))
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5
))
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(8),
z = runif(5) > 0.5
))
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(10),
z = runif(5) > 0.5
))
#transpose using the t function
#all columns (which become rows) are converted to the same type, and dataframe becomes a matrix
t(a_data_frame)
class(t(a_data_frame))
#-------------Functions-------------------------------------------#
#rt function, which generates random numbers from a t-distribution
rt
clear()
clearPushBack()
clean
clean()
pp <- c("Peter", "Piper", "picked", "a", "peck", "of", "pickled","Peppers")
pp
for(i in length(pp)) print(pp[i])
length(pp)
for(i in c(1:length(pp)) print(pp[i])
for(i in 1:length(pp)) print(pp[i])
i <- 1
while (i < length(pp)) {
print (pp[i])
i <- i + 1
}
i <- 1
while (i <= length(pp)) {
print (pp[i])
i <- i + 1
}
help("mean")
a_vector <- c(1, 3, 6, 10)
a_vector
apropos("vector")    # results contain the variable you just created, a_vector, and all other variables
# that contain the string vector
apropos("z$")        #find all variables that end in z
example(plot)
8.5:4.5 #sequence of numbers from 8.5 down to 4.5
c(1, 1:3, c(5, 8), 13) #values concatenated into single vector
vector("numeric", 5)
vector("complex", 5)
vector("logical", 5)
vector("character", 5)
vector("list", 5)
length(1:5)
length(c(TRUE, FALSE, NA))
sn <- c("Sheena", "leads", "Sheila", "needs")
length(sn)
nchar(sn)
pp <- c("Peter", "Piper", "picked", "a", "peck", "of", "pickled","peppers")
for(i in 1:length(pp)) print(pp[i])
i <- 1
while (i <= length(pp)) {
print (pp[i])
i <- i + 1
}
x <- 1:4
x
names(x) <- c("apple", "bananas", "kiwi fruit", "")
x
names(x)
names(x) <- c("apple", bananas, "kiwi fruit", "")
#-----------Indexing Vectors-----------------------------------------------------#
x <- (1:5) ^ 2
x
x[2:4]
#Follwoing three indexing methods return the same values
x[c(1, 3, 5)]
x[c(-2, -4)]
x[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
#After naming each element, this method also returns the same values:
names(x) <- c("one", "four", "nine", "sixteen", "twenty five")
x[c("one", "nine", "twenty five")]
#which function returns the locations where a logical vector is TRUE
which(x > 10)
which.min(x)
which.max(x)
1:5
1:15
1:5 + 1:15
#If the length of the longer vector isn’t a multiple of the length of the shorter one, a warning will be given:
1:5 + 1:7
rep(1:5, 3)
rep(1:5, each = 3)
rep(1:5, times = 1:5)
rep(1:5, length.out = 7)
rep.int(1:5, 3) #the same as rep(1:5, 3)
rep_len(1:5, 13)
(three_d_array <- array(
1:24,
dim = c(4, 3, 2),
dimnames = list(
c("one", "two", "three", "four"),
c("ein", "zwei", "drei"),
c("un", "deux")
)
))
(a_matrix <- matrix(
1:12,
nrow = 4, #ncol = 3 #works the same
dimnames = list(
c("one", "two", "three", "four"),
c("ein", "zwei", "drei")
)
))
class(a_vector)
class(three_d_array)
class(a_matrix)
(two_d_array <- array(
1:12,
dim = c(4, 3),
dimnames = list(
c("one", "two", "three", "four"),
c("ein", "zwei", "drei")
)
))
class(two_d_array)
identical(two_d_array, a_matrix)
class(two_d_array)
dim(three_d_array)  ## [1] 4 3 2
dim(a_matrix)       ## [1] 4 3
nrow(a_matrix)      ## [1] 4
ncol(a_matrix)      ## [1] 3
length(three_d_array)    ## [1] 24   product of each of the dimensions
length(a_matrix)         ## [1] 12
#reshape a matrix; dimension names are stripped
a_matrix
dim(a_matrix) <- c(6, 2)
a_matrix
recaman <- c(0, 1, 3, 6, 2, 7, 13, 20)
nrow(recaman)       ## NULL
NROW(recaman)       ## [1] 8
dim(recaman)
a_matrix
(a_matrix <- matrix(
1:12,
nrow = 4, #ncol = 3 works the same
dimnames = list(
c("one", "two", "three", "four"),
c("ein", "zwei", "drei")
)
))
a_matrix
a_matrix[1, c("zwei", "drei")] #elements in 1st row, 2nd and 3rd columns
a_matrix[1, ] #all of the first row
a_matrix[, c("zwei", "drei")] #all of the second and third columns
seq.int(2, 24, 2)
(another_matrix <- matrix(
seq.int(2, 24, 2),
nrow = 4,
dimnames = list(
c("five", "six", "seven", "eight"),
c("vier", "funf", "sechs")
)
))
a_matrix
another_matrix
c(a_matrix, another_matrix)
class(c(a_matrix, another_matrix))
cbind(a_matrix, another_matrix)
rbind(a_matrix, another_matrix)
#-----Array Arithmetic-----------------------------------------------------------#
a_matrix + another_matrix
a_matrix * another_matrix
#adding nonconformable matrices throws an error
(another_matrix <- matrix(1:12, nrow = 2))
a_matrix * another_matrix
t(a_matrix)       #transposes matrix
a_matrix %*% t(a_matrix) #inner multiplication
1:3 %o% 4:6 #outer multiplication
#Matrix inversion
(m <- matrix(c(1, 0, 1, 5, -3, 1, 2, 4, 7), nrow = 3))
m ^ -1     #does not give inverse; works element-wise on matrices
(inverse_of_m <- solve(m))
m %*% inverse_of_m
(a_list <- list(
c(1, 1, 2, 5, 14, 42),
month.abb,
matrix(c(3, -8, 1, -3), nrow = 2),
asin
))
names(a_list) <- c("catalan", "months", "involutary", "arcsin")
a_list
(main_list <- list(
middle_list = list(
element_in_middle_list = diag(3),
inner_list = list(
element_in_inner_list = pi ^ 1:4,
another_element_in_inner_list = "a"
)
),
element_in_main_list = log10(1:10)
))
is.atomic(list())             ## [1] FALSE
is.recursive(list())          ## [1] TRUE
is.atomic(numeric())          ## [1] TRUE
is.recursive(numeric())       ## [1] FALSE
length(a_list)               ## [1] 4
length(main_list) #doesn't include the lengths of nested lists  ## [1] 2
#lists don’t have dimensions; dim function returns NULL
dim(a_list)
#nrow, NROW,ncol, NCOL  work on lists in the same way as on vectors
nrow(a_list)          ## NULL
ncol(a_list)          ## NULL
NROW(a_list)          ## [1] 4
NCOL(a_list)          ## [1] 1
#Result of indexing operations is another list
l[1]
l <- list(
first = 1,
second = 2,
third = list(
alpha = 3.1,
beta = 3.2
)
)
#Result of indexing operations is another list
l[1]
l[[1]]
l[["first"]]
l$first    #Autocomplete using tab
busy_beaver <- c(1, 6, 21, 107)
busy_beaver
as.list(busy_beaver)
as.numeric(list(1, 6, 21, 107))   #convert list to vector if each element of list contains a scalar value
(prime_factors <- list(
two = 2,
three = 3,
four = c(2, 2),
five = 5,
six = c(2, 3),
seven = 7,
eight = c(2, 2, 2),
nine = c(3, 3),
ten = c(2, 5)
))
unlist(prime_factors)  #to convert list with nonrectangular shape
#-------Combining Lists-----------------------------------#
c(list(a = 1, b = 2), list(3))   #concatenate lists
c(list(a = 1, b = 2), 3)         #concatenate list and vector
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5
))
class(a_data_frame)
data.frame( #lengths 1, 2, and 4 are OK
x = 1, #recycled 4 times
y = 2:3, #recycled twice
z = 4:7 #the longest input; no recycling
)
#placing conditions on columns, the syntax can get a bit clunky
a_data_frame[a_data_frame$y > 0 | a_data_frame$z, "x"]
(a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5
))
#placing conditions on columns, the syntax can get a bit clunky
a_data_frame[a_data_frame$y > 0 | a_data_frame$z, "x"]
a_data_frame
#subset functionn takes up to three arguments: a data frame to subset, a logical vector of conditions for rows to
#include, and a vector of column names to keep
subset(a_data_frame, y > 0 | z, x)
another_data_frame <- data.frame( #same cols as a_data_frame, different order
z = rlnorm(5), #lognormally distributed numbers
y = sample(5), #the numbers 1 to 5, in some order
x = letters[3:7]
)
another_data_frame
rbind(a_data_frame, another_data_frame)
cbind(a_data_frame, another_data_frame)
hypotenuse <- function(x, y)
{
sqrt(x ^ 2 + y ^ 2)
}
hypotenuse
hypotenuse(3, 4)
hypotenuse(y = 24, x = 7)   #pass named arguments to change the order that we pass the arguments
